Python (programming language)
From Wikipedia, the free encyclopedia
Jump to: navigation, search
	This article's lead section may not adequately summarize key points of its contents. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. (March 2013)
Python Python logo.svg
Paradigm(s) 	Multi-paradigm: object-oriented, imperative, functional, procedural, reflective
Appeared in 	1991
Designed by 	Guido van Rossum
Developer 	Python Software Foundation
Stable release 	3.3.0 /
29 September 2012; 5 months ago
2.7.3 /
11 April 2012; 11 months ago
Typing discipline 	duck, dynamic, strong
Major implementations 	CPython, PyPy, IronPython, Jython
Dialects 	Cython, RPython, Stackless Python
Influenced by 	ABC,[1] ALGOL 68,[2] C,[3] C++,[4] Dylan,[5] Haskell,[6] Icon,[7] Java,[8] Lisp,[9] Modula-3,[4] Perl
Influenced 	Boo, Cobra, D, Falcon, Groovy, JavaScript, F#, Ruby[10]
OS 	Cross-platform
License 	Python Software Foundation License
Usual filename extensions 	.py, .pyw, .pyc, .pyo, .pyd

    Official website
    Python Programming at Wikibooks

Python is a general-purpose, high-level programming language whose design philosophy emphasizes code readability. Python's syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C,[11][12] and the language provides constructs intended to enable clear programs on both a small and large scale.[13]

Python supports multiple programming paradigms, including object-oriented, imperative and functional programming styles. It features a fully dynamic type system and automatic memory management, similar to that of Scheme, Ruby, Perl and Tclm and has a large and comprehensive standard library.[14]

Like other dynamic languages, Python is often used as a scripting language, but is also used in a wide range of non-scripting contexts. Using third-party tools, Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems.

CPython, the reference implementation of Python, is free and open source software and has a community-based development model, as do nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation.
Contents

    1 History
    2 Features and philosophy
    3 Syntax and semantics
        3.1 Indentation
        3.2 Statements and control flow
        3.3 Expressions
        3.4 Methods
        3.5 Typing
        3.6 Mathematics
    4 Libraries
    5 Development environments
    6 Implementations
    7 Development
    8 Naming
    9 Use
    10 Impact
    11 See also
    12 References
    13 Further reading
    14 External links

History
[icon] 	This section requires expansion. (March 2013)
Guido van Rossum, the creator of Python
Main article: History of Python

Python was conceived in the late 1980s[15] and its implementation was started in December 1989[16] by Guido van Rossum at CWI in the Netherlands as a successor to the ABC language (itself inspired by SETL)[17] capable of exception handling and interfacing with the Amoeba operating system.[1] Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).

Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode. With this release the development process was changed and became more transparent and community-backed.[18]

Python 3.0 (also called Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008[19] after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6 and 2.7.[20]
Features and philosophy

Python is a multi-paradigm programming language: object-oriented programming and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming (including by metaprogramming[21] and by magic methods).[22] Many other paradigms are supported using extensions, including design by contract[23][24] and logic programming.[25]

Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.

The design of Python offers only limited support for functional programming in the Lisp tradition. The language has map(), reduce() and filter() functions, comprehensions for lists, dictionaries, and sets, as well as generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[26]

The core philosophy of the language is summarized by the document "PEP 20 (The Zen of Python)", which includes aphorisms such as:[27]

    Beautiful is better than ugly.
    Explicit is better than implicit.
    Simple is better than complex.
    Complex is better than complicated.
    Readability counts.

Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface. This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).[15]

While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. As Alex Martelli put it: "To describe something as clever is NOT considered a compliment in the Python culture."[28] Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".[27]

Python's developers strive to avoid premature optimization, and moreover, reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity.[29] When speed is important, Python programmers use PyPy, a just-in-time compiler, or move time-critical functions to extension modules written in "closer to the metal" languages such as C. Cython is also available which translates a Python script into C and makes direct C level API calls into the Python interpreter.

An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name, and in an occasionally playful approach to tutorials and reference materials.[citation needed]

A common neologism in the Python community is pythonic, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.

Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists, Pythonistas, and Pythoneers.[30][31]
Syntax and semantics
Main article: Python syntax and semantics

Python is intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Furthermore Python has a smaller number of syntactic exceptions and special cases than C or Pascal.[32]

The simplicity of Python is demonstrated by its version of the classic "Hello world" program:

print("Hello world")

Indentation

Python uses whitespace indentation, rather than curly braces or keywords, to delimit blocks; a feature also termed the off-side rule. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[33] While some consider this significantly enhances readability, others have criticized it.[34]
Statements and control flow

Python's statements include (among others):

    The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).
    The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.
    The while statement, which executes a block of code as long as its condition is true.
    The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits.
    The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming.
    The def statement, which defines a function or method.
    The with statement (from Python 2.5), which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run, and releasing the lock afterwards).
    The pass statement, which serves as a NOP. It is syntactically needed to create an empty code block.
    The assert statement, used during debugging to check for conditions that ought to apply.
    The yield statement, which returns a value from a generator function. From Python 2.5, yield is also an operator. This form is used to implement coroutines.
    The import statement, which is used to import modules whose functions or variables can be used in the current program.

Python does not support tail-call optimization nor first-class continuations, and, according to Guido van Rossum, it never will.[35][36] However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators.[37] Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function, and as of Python 3.3, the information can be passed through multiple stack levels.[38]
Expressions

Python expressions are similar to languages such as C and Java:

    In Python 2, the / operator on integers does integer division; it truncates the result to an integer. Floating-point division on integers can be achieved by converting one of the integers to a float (e.g. float(x) / y). In Python 3, the result of / is always a floating-point value. This behaviour can be enabled in Python 2.2+ using from __future__ import division. In both Python 2.2+ and Python 3, // can be used to do integer division.
    In Python, == compares by value, in contrast to Java, where it compares by reference. (Value comparisons in Java use the equals() method.) Python's is operator may be used to compare object identities (comparison by reference). Comparisons may be chained, for example a <= b <= c.
    Python uses the words and, or, not for its boolean operators rather than the symbolic &&, ||, ! used in Java and C.
    Python has a type of expression termed a list comprehension. Python 2.4 extended list comprehensions into a more general expression termed a generator expression.[39]
    Anonymous functions are implemented using lambda expressions; however, these are limited in that the body can only be a single expression.
    Conditional expressions in Python are written as x if c else y[40] (different in order of operands from the ?: operator common to many other languages).
    Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The parentheses around the tuple are optional in some contexts. Tuples can appear on the left side of an equal sign; hence a statement like x, y = y, x can be used to swap two variables.
    Python 2 has a "string format" operator %. This functions analogous to printf format strings in C, e.g. "foo=%s bar=%d" % ("blah", 2) evaluates to "foo=blah bar=2". In Python 3, this was supplemented by the format() method of the str class, e.g. "foo={0} bar={1}".format("blah", 2).
    Python has various kinds of string literals:
        Strings delimited by single or double quotation marks. Unlike in Unix shells, Perl and Perl-influenced languages, single quotation marks and double quotation marks function similarly. Both kinds of string use the backslash (\) as an escape character and there is no implicit string interpolation such as "$foo".
        Triple-quoted strings, which begin and end with a series of three single or double quotation marks. They may span multiple lines and function like here documents in shells, Perl and Ruby.
        Raw string varieties, denoted by prefixing the string literal with an r. No escape sequences are interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. Compare "@-quoting" in C#.
    Python has index and slice expressions on lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted, for example a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.

In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to some duplication of functionality. For example:

    List comprehensions vs. for-loops
    Conditional expressions vs. if blocks
    The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements.

Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } is valid C code but if c = 1: ... causes a syntax error in Python.
Methods

Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).[41]
Typing

Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.

Python allows programmers to define their own types using classes, which are most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.

Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style".[42] Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type).
Summary of Python 3's built-in types Type 	Description 	Syntax example
str 	A character string: an immutable sequence of Unicode codepoints. 	'Wikipedia'
"Wikipedia"
"""Spanning
multiple
lines"""
bytearray 	A mutable sequence of bytes. 	bytearray(b'Some ASCII')
bytearray(b"Some ASCII")
bytearray([119, 105, 107, 105])
bytes 	An immutable sequence of bytes. 	b'Some ASCII'
b"Some ASCII"
bytes([119, 105, 107, 105])
list 	Mutable list, can contain mixed types. 	[4.0, 'string', True]
tuple 	Immutable, can contain mixed types. 	(4.0, 'string', True)
set, frozenset 	Unordered set, contains no duplicates. A frozenset is immutable. 	{4.0, 'string', True}
frozenset([4.0, 'string', True])
dict 	A mutable associative array of key and value pairs. 	{'key1': 1.0, 3: False}
int 	An immutable integer of unlimited magnitude.[43] 	42
float 	An immutable floating point number (system-defined precision). 	3.1415927
complex 	An immutable complex number with real and imaginary parts. 	3+2.7j
bool 	An immutable truth value. 	True
False
Mathematics

In contrast with some programming languages, integer division is defined to round towards minus infinity. Therefore 7 // 3 is 2, but (-7) // 3 is -3. This is uniform and consistent: for instance, it means that the equation (a+b) // b == a // b + 1 is always true, whereas in languages such as C, (-6+7) / 7 == -6 / 7. It also means that the equation b * (a // b) + a % b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a % b is, as expected, in the half-open interval [0,b), where b is a positive integer, it has to lie in the interval (b,0] when b is negative.[44]

Python provides a round function for rounding floats to integers. Versions before 3 use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is -1.0.[45] Python 3 uses round-to-even: round(1.5) is 2.0, round(2.5) is 2.0.[46] The Decimal type/class in module decimal (since version 2.4) provides exact numerical representation and several rounding modes.

Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[47][page needed]
Libraries

Python has a large standard library, commonly cited as one of Python's greatest strengths,[48] providing tools suited to many tasks. This is deliberate and has been described as a "batteries included"[14] Python philosophy. For Internet-facing applications, a large number of standard formats and protocols (such as MIME and HTTP) are supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals,[49] manipulating regular expressions, and doing unit testing are also included. For software testing, the standard library provides the unittest and doctest modules.

Some parts of the standard library are covered by specifications (for example, the WSGI implementation wsgiref follows PEP 333[50]), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations.

The standard library is not essential to run Python or embed Python within an application. Blender 2.49 for instance omits most of the standard library.

The Python Package Index, which is the official repository of third-party software for Python, contains over 25,000 "packages" covering a wide range of functionality, including:

    graphical user interface, web framework, multimedia, databases, networking and communications
    test frameworks, documentation tools, system administration
    scientific computing, text processing, image processing

Development environments

Most Python implementations (including CPython) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell.

Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.

In addition to standard desktop Python IDEs (integrated development environments), there are also browser-based IDEs, Sage, (intended for developing science and math-related Python programs), and a hosted IDE, pythonAnywhere.
Implementations
See also: List of Python software#Python implementations

The main Python implementation, named CPython, is written in C meeting the C89 standard.[51] It compiles Python programs into intermediate bytecode,[52] which is executed by the virtual machine.[53] CPython is distributed with a large standard library written in a mixture of C and Python. It is available in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform.[54]

PyPy is a fast, compliant[55] interpreter of Python 2.7. Its just-in-time compiler brings a significant speed improvement over CPython.[56] A version taking advantage of multi-core processors using software transactional memory is in the works.[57]

Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.[58]

Other just-in-time compilers have been developed in the past, but are now unsupported:

    Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores.[59] Later the project lost Google's backing and its main developers. As of 1 February 2012, the modified interpreter was about 2 times faster than CPython.[citation needed]
    Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code.

In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with GTK widget libraries, with the feature that programs can be both written and run on the device itself.[citation needed]

There are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:

    Jython compiles into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the use of Java class library functions from the Python program.
    IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime.
    The RPython language can be compiled to C, Java bytecode or Common Intermediate Language, and is used to build the PyPy interpreter of Python;
    Pyjamas compiles Python to JavaScript;
    Shed Skin compiles Python to C++;
    Cython and Pyrex compile to C.

Development

Python's development is conducted largely through the Python Enhancement Proposal (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python.[60] Outstanding PEPs are reviewed and commented upon by the Python community and by Van Rossum, the Python project's Benevolent Dictator for Life (leader / language architect).[60]

Enhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language's development; specific issues are discussed in the Roundup bug tracker maintained at python.org.[61] Development takes place on a self-hosted source code repository running Mercurial.[citation needed]

CPython's public releases come in three types, distinguished by which part of the version number is incremented:

    Backwards-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.
    Major or "feature" releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.[62]
    Bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.[63]

A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.[64]

The community of Python developers has also contributed over 25,000 software modules to the Python Package Index (called pypi), the official repository of third-party libraries for python.

The major academic conference on Python is named PyCon. There are special mentoring programmes like the Pyladies.
Naming